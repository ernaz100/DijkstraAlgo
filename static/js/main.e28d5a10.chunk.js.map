{"version":3,"sources":["components/Navigation.jsx","components/Footer.jsx","components/Home.jsx","components/About.jsx","components/Contact.jsx","components/Node.jsx","components/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["withRouter","props","className","class","to","type","id","role","Footer","Home","About","Contact","Node","isStart","isFinish","isAnimated","isPath","isWall","onMouseDown","row","col","onMouseUp","onMouseEnter","PathfindingVisualizer","React","useState","grid","setGrid","GRID_WIDTH","orderOfVisit","isPressed","setPressed","handleMouseDown","newGrid","getNewGridWithWallToggled","handleMouseUp","handleMouseEnter","getNearestNode","nearest_node","distance","Infinity","forEach","rowIdx","node","colIdx","isVisited","markNodeASVisited","push","updateNeighborDistance","neighbor","path","updateTopNeighborDistance","updateRightNeighborDistance","GRID_HEIGHT","updateBottomNeighborDistance","updateLeftNeighborDistance","useEffect","nodes","currentRow","currentNode","onClick","console","log","end_node","i","length","setTimeout","document","getElementById","animatePath","animateVisited","map","rowIndex","nodeIdx","slice","newNode","App","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e28d5a10.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport \"../styles/Navigation.css\"\r\nfunction Navigation(props) {\r\n  return (\r\n    <div className=\"navigation\">\r\n      <nav class=\"navbar navbar-expand-lg navbar-light bar\">\r\n        <div class=\"container-fluid\">\r\n          <Link class=\"navbar-brand\" to=\"/\">\r\n            ComputerVision\r\n          </Link>\r\n          <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span class=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li class=\"nav-item\">\r\n                <Link class=\"nav-link\" to=\"/about\">\r\n                  About\r\n                </Link>\r\n              </li>\r\n              <li class=\"nav-item\">\r\n                <Link class=\"nav-link\" to=\"/contact\">\r\n                  Contact\r\n                </Link>\r\n              </li>\r\n              <li class=\"nav-item\">\r\n                <Link class=\"nav-link\" to=\"/dijkstra\">\r\n                  Dijkstras \r\n                </Link>\r\n              </li>\r\n              <li class=\"nav-item dropdown\">\r\n                <Link class=\"nav-link dropdown-toggle\" to=\"#\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                Dropdown\r\n                </Link>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                    <li>\r\n                        <Link class=\"dropdown-item\" to=\"#\">BubbleSquirt</Link>\r\n                    </li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Navigation);","\r\nimport React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home\">\r\n      <h1> Welcome to my Algorithm Visualisation Project!</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"about\">\r\n      <p>My name is Eric Nazarenus I'm trying to learn Web Development and understand Algorithms better here!!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nfunction Contact() {\r\n  return (\r\n    <div className=\"contact\">\r\n      <p>Contact me at your own risk! Eric@ComputerVision.cc</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;","import React from \"react\";\r\nimport \"../styles/Node.css\";\r\nfunction Node(props) {\r\n  const className = props.isStart\r\n    ? \"node start\"\r\n    : props.isFinish\r\n    ? \"node end\"\r\n    : props.isAnimated\r\n    ? \"node visited\"\r\n    : props.isPath\r\n    ? \"node path\"\r\n    : props.isWall\r\n    ? \"node wall\"\r\n    : \"node\";\r\n\r\n  return (\r\n    <div\r\n      id={props.id}\r\n      className={className}\r\n      onMouseDown={() => props.onMouseDown(props.row, props.col)}\r\n      onMouseUp={() => props.onMouseUp()}\r\n      onMouseEnter={() => props.onMouseEnter(props.row, props.col)}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\nimport Node from \"./Node\";\r\nimport \"../styles/PathfindingVisualizer.css\";\r\nfunction PathfindingVisualizer() {\r\n  const [grid, setGrid] = React.useState([]);\r\n  const GRID_WIDTH = 20;\r\n  const GRID_HEIGHT = 20;\r\n  const FINISHROW = 7;\r\n  const FINISHCOL = 12;\r\n  const STARTROW = 10;\r\n  const STARTCOL = 5;\r\n  let orderOfVisit = [];\r\n  const [isPressed, setPressed] = React.useState(false);\r\n  React.useEffect(() => {\r\n    const nodes = [];\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        const currentNode = {\r\n          col,\r\n          row,\r\n          id: col + row * GRID_WIDTH,\r\n          isStart: row === STARTROW && col === STARTCOL,\r\n          isFinish: row === FINISHROW && col === FINISHCOL,\r\n          isAnimated: false,\r\n          isVisited: false,\r\n          isPath: false,\r\n          isWall: false,\r\n          distance: row === STARTROW && col === STARTCOL ? 0 : Infinity,\r\n          path: [],\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    setGrid(nodes);\r\n  }, []);\r\n\r\n  function dijkstra() {\r\n    let nearest_node = { isFinish: false };\r\n    while (!nearest_node.isFinish) {\r\n      //1 Get nearest node\r\n      nearest_node = getNearestNode(grid);\r\n      if (nearest_node.isVisited) {\r\n        console.log(\"Can't find closest Note\");\r\n        break;\r\n      }\r\n      //2 Mark node as visited and add to animation Array\r\n      markNodeASVisited(nearest_node);\r\n      //3 Update the neighbor distances and update path array for Path from Start to Finish\r\n      updateNeighborDistance(nearest_node);\r\n    }\r\n    animateVisited(nearest_node);\r\n    return;\r\n  }\r\n  function animateVisited(end_node) {\r\n    for (let i = 0; i <= orderOfVisit.length; i++) {\r\n      if (i === orderOfVisit.length) {\r\n        setTimeout(() => {\r\n          animatePath(end_node);\r\n        }, 100 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = orderOfVisit[i];\r\n        if (\r\n          document.getElementById(node.id).className !== \"node start\" &&\r\n          document.getElementById(node.id).className !== \"node end\"\r\n        ) {\r\n          document.getElementById(node.id).className = \"node visited\";\r\n        }\r\n      }, 100 * i);\r\n    }\r\n\r\n    return;\r\n  }\r\n  function animatePath(end_node) {\r\n    for (let i = 0; i < end_node.path.length; i++) {\r\n      setTimeout(() => {\r\n        const node = end_node.path[i];\r\n        if (\r\n          document.getElementById(node.id).className !== \"node start\" &&\r\n          document.getElementById(node.id).className !== \"node end\"\r\n        ) {\r\n          document.getElementById(node.id).className = \"node path\";\r\n        }\r\n      }, 75 * i);\r\n    }\r\n    return;\r\n  }\r\n\r\n  function handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(row, col);\r\n    setGrid(newGrid);\r\n    setPressed(true);\r\n    return;\r\n  }\r\n  function handleMouseUp() {\r\n    setPressed(false);\r\n    return;\r\n  }\r\n  function handleMouseEnter(row, col) {\r\n    if (isPressed) {\r\n      const newGrid = getNewGridWithWallToggled(row, col);\r\n      setGrid(newGrid);\r\n    }\r\n    return;\r\n  }\r\n  function getNearestNode(grid) {\r\n    let nearest_node = {\r\n      distance: Infinity,\r\n      row: STARTROW,\r\n      col: STARTCOL,\r\n    };\r\n    grid.forEach((row, rowIdx) => {\r\n      row.forEach((node, colIdx) => {\r\n        if (\r\n          node.distance < nearest_node.distance &&\r\n          !node.isVisited &&\r\n          !node.isWall\r\n        ) {\r\n          nearest_node.distance = node.distance;\r\n          nearest_node.row = rowIdx;\r\n          nearest_node.col = colIdx;\r\n        }\r\n      });\r\n    });\r\n    return grid[nearest_node.row][nearest_node.col];\r\n  }\r\n\r\n  function markNodeASVisited(node) {\r\n    node.isVisited = true;\r\n    orderOfVisit.push(node);\r\n    return;\r\n  }\r\n\r\n  function updateNeighborDistance(node) {\r\n    updateTopNeighborDistance(node);\r\n    updateRightNeighborDistance(node);\r\n    updateBottomNeighborDistance(node);\r\n    updateLeftNeighborDistance(node);\r\n\r\n    return;\r\n  }\r\n  function updateTopNeighborDistance(node) {\r\n    if (node.row === 0) {\r\n      return;\r\n    }\r\n    let neighbor = grid[node.row - 1][node.col];\r\n    if (node.distance + 1 > neighbor.distance) {\r\n      return;\r\n    } else {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.path = [...node.path];\r\n      neighbor.path.push(node);\r\n    }\r\n    return;\r\n  }\r\n  function updateRightNeighborDistance(node) {\r\n    if (node.col === GRID_WIDTH - 1) {\r\n      return;\r\n    }\r\n    let neighbor = grid[node.row][node.col + 1];\r\n    if (node.distance + 1 > neighbor.distance) {\r\n      return;\r\n    } else {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.path = [...node.path];\r\n      neighbor.path.push(node);\r\n    }\r\n    return;\r\n  }\r\n  function updateBottomNeighborDistance(node) {\r\n    if (node.row === GRID_HEIGHT - 1) {\r\n      return;\r\n    }\r\n    let neighbor = grid[node.row + 1][node.col];\r\n    if (node.distance + 1 > neighbor.distance) {\r\n      return;\r\n    } else {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.path = [...node.path];\r\n      neighbor.path.push(node);\r\n    }\r\n    return;\r\n  }\r\n  function updateLeftNeighborDistance(node) {\r\n    if (node.col === 0) {\r\n      return;\r\n    }\r\n    let neighbor = grid[node.row][node.col - 1];\r\n    if (node.distance + 1 > neighbor.distance) {\r\n      return;\r\n    } else {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.path = [...node.path];\r\n      neighbor.path.push(node);\r\n    }\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-success start-button\"\r\n        onClick={dijkstra}\r\n      >\r\n        Start Dijkstra\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-warning start-button\"\r\n        onClick={reset}\r\n      >\r\n        Reset Grid\r\n      </button>\r\n      {grid.map((row, rowIndex) => {\r\n        return (\r\n          <div key={rowIndex}>\r\n            {row.map((node, nodeIdx) => (\r\n              <Node\r\n                key={node.id}\r\n                id={node.id}\r\n                row={node.row}\r\n                col={node.col}\r\n                isStart={node.isStart}\r\n                isFinish={node.isFinish}\r\n                isVisited={node.isVisited}\r\n                isAnimated={node.isAnimated}\r\n                isPath={node.isPath}\r\n                distance={node.distance}\r\n                isWall={node.isWall}\r\n                onMouseDown={handleMouseDown}\r\n                onMouseUp={handleMouseUp}\r\n                onMouseEnter={handleMouseEnter}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n\r\n  function reset() {\r\n    const nodes = [];\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        const currentNode = {\r\n          col,\r\n          row,\r\n          id: col + row * GRID_WIDTH,\r\n          isStart: row === STARTROW && col === STARTCOL,\r\n          isFinish: row === FINISHROW && col === FINISHCOL,\r\n          isAnimated: false,\r\n          isVisited: false,\r\n          isPath: false,\r\n          distance: row === STARTROW && col === STARTCOL ? 0 : Infinity,\r\n          path: [],\r\n        };\r\n        currentRow.push(currentNode);\r\n        if (\r\n          document.getElementById(col + row * GRID_WIDTH).className ===\r\n            \"node visited\" ||\r\n          document.getElementById(col + row * GRID_WIDTH).className ===\r\n            \"node path\"\r\n        ) {\r\n          document.getElementById(col + row * GRID_WIDTH).className = \"node\";\r\n        }\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    setGrid(nodes);\r\n    return;\r\n  }\r\n\r\n  function getNewGridWithWallToggled(row, col) {\r\n    const newGrid = grid.slice();\r\n    const node = grid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  }\r\n}\r\n\r\nexport default PathfindingVisualizer;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Navigation, Footer, Home, About, Contact, PathfindingVisualizer } from \"./components\";\nimport \"./styles/App.css\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route path=\"/\" exact component={() => <Home />} />\n          <Route path=\"/about\" exact component={() => <About />} />\n          <Route path=\"/dijkstra\" exact component={() => <PathfindingVisualizer />} />\n          <Route path=\"/contact\" exact component={() => <Contact />} />\n        </Switch>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}